{"version":3,"sources":["webpack:///./src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","response","registration","onupdatefound","installingWorker","installing","onstatechange","state","navigator","controller","log","catch","error","console","addEventListener","status","headers","get","indexOf","ready","unregister","reload"],"mappings":"8IAcA,IAAMA,EAAcC,QAAqC,cAA7BC,OAAOC,SAASC,UAAyD,UAA7BF,OAAOC,SAASC,UAAwBF,OAAOC,SAASC,SAASC,MAAM,2DAE/I,SAASC,EAAgBC,aACdC,cACRC,SAASF,GACTG,KAAK,SAACC,OACAC,EAEND,IAAaE,cAAgB,eACtBC,EAAmBF,EAEzBG,aAAiBC,cAAgB,WACD,cAA3BF,EAAiBG,QAChBC,UAAUV,cAAcW,mBAOnBC,IACR,qDAKQA,IACR,2CAKJC,MAAM,SAAAC,UAASC,QAAQD,MAAM,6CAA8CA,eA2B7D,WAC6B,kBAAmBJ,iBACxDM,iBAAiB,OAAQ,eACzBjB,EAEN,oBAAKP,EA7BR,SAAiCO,SAE1BA,GACJG,KAAK,SAACC,GAEkB,MAApBA,EAASc,SAAkF,IAAhEd,EAASe,QAAQC,IAAI,gBAAgBC,QAAQ,wBAEjEpB,cAAcqB,MACtBnB,KAAK,SAAAE,YAA6BkB,aACjCpB,KAAK,kBAAMR,OAAOC,SAAS4B,eAI9BxB,KAEDc,MAAM,SAAAC,UAASC,QAAQD,MAAM,iEAAkEA,MAoB9Ff,KAHAA,aAMMa,IACR","file":"scripts.js","sourcesContent":["/**\n * In production, we register a service worker to serve assets from local cache.\n *\n * This lets the app load faster on subsequent visits in production, and gives it offline capabilities.\n * However, it also means that developers (and users) will only see deployed updates on the \"N+1\" visit to a page,\n * since previously cached resources are updated in the background.\n *\n * To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n * This link also includes instructions on opting out of this behavior.\n */\n\n/* eslint-disable no-console */\n\n/* [::1] is the IPv6 localhost address. 127.0.0.1/8 is considered localhost for IPv4. */\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((response) => {\n\t\t\tconst registration = response;\n\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * At this point, the old content will have been purged and\n\t\t\t\t\t\t\t * the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t * It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t * available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * At this point, everything has been precached.\n\t\t\t\t\t\t\t * It's the perfect time to display a \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => console.error('Error during service worker registration: ', error));\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t/* Check if the service worker can be found. If it can't, reload the page. */\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t/* Ensure service worker exists, and that we really are getting a JS file. */\n\t\t\tif (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n\t\t\t\t/* No service worker found. Probably a different app. Reload the page. */\n\t\t\t\tnavigator.serviceWorker.ready\n\t\t\t\t\t.then(registration => registration.unregister()\n\t\t\t\t\t\t.then(() => window.location.reload()));\n\t\t\t} else {\n\t\t\t\t/* Service worker found. Proceed as normal. */\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(error => console.error('No internet connection found. App is running in offline mode. ', error));\n}\n\nconst unregister = () => {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => registration.unregister());\n\t}\n};\n\nconst register = () => {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = 'service-worker.js';\n\n\t\t\tif (!isLocalhost) {\n\t\t\t\t/* Is not local host. Just register service worker */\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t} else {\n\t\t\t\t/* This is running on localhost. Lets check if a service worker still exists or not. */\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconsole.log('Cannot register service workers in development mode.');\n\t}\n};\n\nexport default register;\n\n/* eslint-enable no-console */\n"],"sourceRoot":""}